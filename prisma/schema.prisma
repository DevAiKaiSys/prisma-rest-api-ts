generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id         Int            @id @unique @default(autoincrement())
  parentId   Int?
  childOrder Int?
  name       String?        @db.VarChar(255)
  name2      String?
  isDefault  Boolean        @default(false)
  isBrand    Boolean        @default(false)
  noBarcode  Boolean        @default(false)
  type       category_type?
  shopId     Int?
  parent     category?      @relation("categoryTocategory", fields: [parentId], references: [id], onDelete: Cascade)
  children   category[]     @relation("categoryTocategory")
  shop       shop?          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product    product[]

  @@index([parentId])
  @@index([shopId])
}

model customer {
  id          Int       @id @unique @default(autoincrement())
  shopId      Int
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String?
  address     String?
  // createdAt   DateTime  @default(now()) // UTC
  // updatedAt   DateTime  @updatedAt //UTC
  createdAt   DateTime
  updatedAt   DateTime
  shop        shop      @relation(fields: [shopId], references: [id])
  invoice     invoice[]

  @@index([email])
  @@index([shopId])
}

model invoice {
  id            Int            @id @unique @default(autoincrement())
  shopId        Int
  sellerId      Int?
  invoiceNumber String         @unique
  // issuedAt      DateTime       @default(now()) //UTC
  issuedAt      DateTime
  dueDate       DateTime?
  totalAmount   Decimal        @db.Decimal(10, 2)
  isPaid        Boolean        @default(false)
  customerId    Int?
  customer      customer?      @relation(fields: [customerId], references: [id])
  shop_user     shop_user?     @relation(fields: [sellerId], references: [id])
  shop          shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  invoice_item  invoice_item[]
  payment       payment[]

  @@index([customerId])
  @@index([sellerId])
  @@index([shopId])
}

model invoice_item {
  id        Int      @id @unique @default(autoincrement())
  invoiceId Int
  barcode   String?
  name      String
  unit      String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  discount  Decimal? @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  invoice   invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model payment {
  id           Int       @id @unique @default(autoincrement())
  invoiceId    Int
  cash         Decimal?  @db.Decimal(10, 2)
  otherMethods Decimal?  @db.Decimal(10, 2)
  change       Decimal?  @db.Decimal(10, 2)
  remaining    Decimal?  @db.Decimal(10, 2)
  paymentDate  DateTime?
  invoice      invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model product {
  id               Int            @id @unique @default(autoincrement())
  categoryId       Int
  name             String?        @db.VarChar(255)
  name2            String?        @db.VarChar(255)
  isVat            Boolean        @default(true)
  measurementUnit  String?        @db.VarChar(20)
  color_attributes String?        @db.VarChar(255)
  expirationPeriod Int?
  category         category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product_unit     product_unit[]

  @@index([categoryId])
}

model product_unit {
  id             Int      @id @unique @default(autoincrement())
  productId      Int
  unitId         Int?
  multipleFactor Int?
  baseUnitId     Int?
  price          Decimal? @db.Decimal(10, 2)
  cost           Decimal? @db.Decimal(10, 2)
  barcode        String?  @db.VarChar(255)
  barcode2       String?  @db.VarChar(255)
  // createdAt      DateTime @default(now()) //UTC
  // updatedAt      DateTime @updatedAt //UTC
  createdAt      DateTime
  updatedAt      DateTime
  baseUnit       unit?    @relation("product_unit_baseUnitIdTounit", fields: [baseUnitId], references: [id])
  product        product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  unit           unit?    @relation("product_unit_unitIdTounit", fields: [unitId], references: [id])

  @@index([baseUnitId])
  @@index([productId])
  @@index([unitId])
}

model shop {
  id        Int         @id @unique @default(autoincrement())
  name      String
  category  category[]
  customer  customer[]
  invoice   invoice[]
  shop_user shop_user[]
  unit      unit[]
}

model shop_user {
  id       Int       @id @unique @default(autoincrement())
  shopId   Int
  username String
  password String
  name     String
  invoice  invoice[]
  shop     shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model unit {
  id                                         Int            @id @unique @default(autoincrement())
  name                                       String         @db.VarChar(255)
  shopId                                     Int
  product_unit_product_unit_baseUnitIdTounit product_unit[] @relation("product_unit_baseUnitIdTounit")
  product_unit_product_unit_unitIdTounit     product_unit[] @relation("product_unit_unitIdTounit")
  shop                                       shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

enum category_type {
  MAIN_GROUP
  SUB_GROUP
}
